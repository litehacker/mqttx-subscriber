generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model House {
  id        String   @id @default(cuid())
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  entries   Entry[]
}

model Entry {
  houseId        String
  id             String        @id @default(cuid())
  title          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  balance        Int           @default(0)
  subscriptionId String?       @unique
  house          House         @relation(fields: [houseId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  families       Family[]
  payments       Payment[]
  rides          Ride[]
  terminals      Terminal[]
}

model Subscription {
  id             String     @id @default(cuid())
  priceMonthly   Int
  priceExtraUser Int
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  lastPayment    DateTime?
  rideFee        Int        @default(0)
  entry          Entry?
  family         Family?
  payments       Payment[]
  rides          Ride[]
  terminals      Terminal[]

  @@index([lastPayment])
}

model Terminal {
  entryId        String?
  id             String        @id @unique
  balance        Int           @default(0)
  ownerId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  title          String
  subscriptionId String?
  free           Boolean?      @default(false)
  lastOnline     DateTime?
  active         Boolean       @default(true)
  payments       Payment[]
  rides          Ride[]
  entry          Entry?        @relation(fields: [entryId], references: [id])
  owner          User?         @relation(fields: [ownerId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
}

model Family {
  entryId        String
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscriptionId String       @unique
  title          String
  lastPayment    DateTime?
  balance        Int          @default(0)
  nextPayment    DateTime?
  cards          Card[]
  entry          Entry        @relation(fields: [entryId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  logs           Log[]
  payments       Payment[]
  rides          Ride[]
  members        User[]       @relation("FamilyToUser")

  @@index([lastPayment])
  @@index([balance])
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  phoneNumber String     @unique
  balance     Int        @default(0)
  role        String     @default("user")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  fullName    String
  payments    Payment[]
  terminals   Terminal[]
  families    Family[]   @relation("FamilyToUser")
}

model Card {
  id        String    @id @unique
  title     String?
  content   String?
  familyId  String?
  pin       String    @unique
  balance   Int       @default(0)
  active    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  family    Family?   @relation(fields: [familyId], references: [id])
  rides     Ride[]
}

model Payment {
  id                String        @id @default(cuid())
  amount            Int
  userId            String?
  description       String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  entryId           String?
  familyId          String?
  subscriptionId    String?
  terminalId        String?
  commission        Int           @default(0)
  receiptId         Int           @unique @default(autoincrement())
  bankTransactionId String?       @unique
  type              PaymentType?
  logs              Log[]
  entry             Entry?        @relation(fields: [entryId], references: [id])
  family            Family?       @relation(fields: [familyId], references: [id])
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  terminal          Terminal?     @relation(fields: [terminalId], references: [id])
  user              User?         @relation(fields: [userId], references: [id])
}

model Ride {
  id             String        @id @default(cuid())
  cardId         String
  terminalId     String
  familyId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  amount         Int           @default(0)
  entryId        String?
  subscriptionId String?
  card           Card          @relation(fields: [cardId], references: [id])
  entry          Entry?        @relation(fields: [entryId], references: [id])
  family         Family        @relation(fields: [familyId], references: [id])
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  terminal       Terminal      @relation(fields: [terminalId], references: [id])
}

model Firmware {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(autoincrement())
  lastAddress String
  software    String
  notes       String
}

model Log {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  level     LogLevel
  type      LogType
  message   String
  familyId  String?
  paymentId String?
  metadata  Json?
  duration  Int?
  family    Family?  @relation(fields: [familyId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@index([timestamp])
  @@index([level])
  @@index([type])
  @@index([familyId])
  @@index([paymentId])
}

enum PaymentType {
  BALANCE
  CARDS
  SUBSCRIPTION
  RIDE
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum LogType {
  PAYMENT_PROCESSING
  PAYMENT_VERIFICATION
  QUEUE_STATUS
  BALANCE_UPDATE
  SYSTEM_STATUS
  RETRY_ATTEMPT
}
